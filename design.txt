
Node class
{
  left: Node
  right: Node
  value: Integer
  pathCost: Integer
}

largestSumBFS(Node node) -> Integer
{
  q: Queue of Node

  maxCost := 0
  node.pathCost := node.value
  q.enque(node)

  while not q.empty()
  {
    n := q.deque()

    if (n.right == null AND n.left == null)
    {
      if (n.pathCost > maxCost)
        {
          maxCost := n.pathCost
        }
    }
    if (n.right != null)
    {
      # only assign a new path cost if the current cost
      # is greater than any previous path cost
      cost := n.pathCost + n.right.value
      if (cost > n.right.pathCost)
      {
        n.right.pathCost := cost
      }
      q.enque(n.right)
    }
    if (n.left != null)
    {
      cost := n.pathCost + n.left.value
      if (cost > n.left.pathCost)
      {
        n.left.pathCost := cost
      }
      q.enque(n.left)
    }
  }
  return maxCost
}

largestSumDFS(Node node) -> Integer
{
  if node.left == null and node.right == null
    return node.value

  if node.left == null
    return largestSum(node.right) + node.value

  if node.right == null
    return largestSum(node.left) + node.value

  return max(largestSum(node.left), largestSum(node.right)) + node.value
}

max(a: Integer, b: Integer) -> Integer
{
  if a > b
    return a
  else
    return b
}
